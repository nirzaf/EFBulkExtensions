using Bogus;

using EFBulkExtensions.Model;

using EFCore.BulkExtensions;

using Microsoft.AspNetCore.Mvc;

namespace EFBulkExtensions.Controllers;

[Route("api/[controller]")]
[ApiController]
public class EmployeeController : ControllerBase
{
    private readonly AppDbContext _context;

    public EmployeeController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult Get()
    {
        var employees = _context.Employees.ToList();
        return Ok(employees);
    }


    //Get Employee by Id 
    [HttpGet("{id}")]
    public IActionResult Get(int id)
    {
        var employee = _context.Employees.Find(id);
        return Ok(employee);
    }

    //Insert Employee via get request to get the employee count and Faker will generate the count of employees
    [HttpGet("insert/{count}")]
    public IActionResult Insert(int count)
    {
        try
        {
            var employees = new Faker<EmployeeInsertDto>()
                .RuleFor(e => e.FullName, f => f.Name.FullName())
                .RuleFor(e => e.Email, f => f.Internet.Email())
                .RuleFor(e => e.Address, f => f.Address.FullAddress())
                .RuleFor(e => e.Phone, f => f.Phone.PhoneNumber())
                .RuleFor(e => e.DateOfBirth, f => f.Date.Past(50, DateTime.Now.AddYears(-18)))
                .RuleFor(e => e.DateOfJoining, f => f.Date.Past(5, DateTime.Now))
                .Generate(count);
            
            //Assign list EmployeeInsertDto to list Employee
            var employeeList = employees.Select(e => new Employee
            {
                Id = Guid.NewGuid(),
                FullName = e.FullName,
                Email = e.Email,
                Address = e.Address,
                Phone = e.Phone,
                DateOfBirth = e.DateOfBirth,
                DateOfJoining = e.DateOfJoining
            }).ToList();

            _context.BulkInsert(employeeList);
            return Ok();
        }
        catch (Exception exception)
        {
            return new BadRequestObjectResult(exception.Message); 
        }
    }
        
    //Update all employees address with new address generated by Faker
    [HttpGet("update")]
    public IActionResult Update()
    {
        var employees = _context.Employees.ToList();
        var newAddress = new Faker().Address.FullAddress();
        employees.ForEach(e => e.Address = newAddress);
        _context.BulkUpdate(employees);
        return Ok();
    }
        
    [HttpGet("list")]
    public IActionResult GetEmployeeList([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string sort = "id", [FromQuery] string sortDir = "asc")
    {
        var employees = _context.Employees.AsQueryable();
        
        if (sortDir == "asc")
        {
            employees = sort switch
            {
                "id" => employees.OrderBy(e => e.Id),
                "name" => employees.OrderBy(e => e.FullName),
                "email" => employees.OrderBy(e => e.Email),
                "address" => employees.OrderBy(e => e.Address),
                "phone" => employees.OrderBy(e => e.Phone),
                "dob" => employees.OrderBy(e => e.DateOfBirth),
                "doj" => employees.OrderBy(e => e.DateOfJoining),
                _ => employees
            };
        }
        else
        {
            employees = sort switch
            {
                "id" => employees.OrderByDescending(e => e.Id),
                "name" => employees.OrderByDescending(e => e.FullName),
                "email" => employees.OrderByDescending(e => e.Email),
                "address" => employees.OrderByDescending(e => e.Address),
                "phone" => employees.OrderByDescending(e => e.Phone),
                "dob" => employees.OrderByDescending(e => e.DateOfBirth),
                "doj" => employees.OrderByDescending(e => e.DateOfJoining),
                _ => employees
            };
        }
        
        var totalRecords = employees.Count();
        var totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
        var data = employees.Skip((page - 1) * pageSize).Take(pageSize).ToList();

        return Ok(new
        {
            data,
            totalRecords,
            totalPages
        });
    }


    [HttpPost]
    public async Task<string> Post([FromBody] List<Employee> employees)
    {
        employees = new Faker<Employee>()
            .RuleFor(e => e.Id, f => Guid.NewGuid())
            .RuleFor(e => e.FullName, f => f.Name.FullName())
            .RuleFor(e => e.Email, f => f.Internet.Email())
            .RuleFor(e => e.Address, f => f.Address.FullAddress())
            .RuleFor(e => e.Phone, f => f.Phone.PhoneNumber())
            .RuleFor(e => e.DateOfBirth, f => f.Date.Past(50, DateTime.Now.AddYears(-18)))
            .RuleFor(e => e.DateOfJoining, f => f.Date.Past(5, DateTime.Now))
            .Generate(100000);

        //Track the time 
        var watch = System.Diagnostics.Stopwatch.StartNew();
        await _context.BulkInsertAsync(employees);
        watch.Stop();
        var elapsedMs = watch.ElapsedMilliseconds;
        Console.WriteLine("Time taken to insert 100000 records using EfCore bulk Extensions: " + elapsedMs + "ms");

        return "Time taken to insert 100000 records using EfCore bulk Extensions: " + elapsedMs + "ms";
    }
}